1.linked list data structure
#include <stdio.h>
#include<malloc.h>
typedef struct node{
    int data;
    struct node *next;
}NODE;
NODE *newnode,*start=NULL,*tptr,*shadow;
void insert(int num){
    newnode =(NODE*)malloc(sizeof(NODE));
    newnode->data=num;
    newnode->next=NULL;
    for(tptr=start;tptr;shadow=tptr,tptr=tptr->next);
    if(start==NULL){
        newnode->next=start;
        start=newnode;
    }
    else{
        newnode->next=shadow->next;
        shadow->next=newnode;
    }
}
    void display(){
        for(tptr=start;tptr;tptr=tptr->next)
        printf("%d->",tptr->data);
    }
int main() {
    insert(10);
    insert(20);
    insert(30);
    insert(40);
    display();
    return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------------------
2.linked list delete the value
#include <stdio.h>
#include<malloc.h>
typedef struct node{
    int data;
    struct node *next;
}NODE;
NODE *newnode,*start=NULL,*tptr,*shadow;
void insert(int num){
    newnode =(NODE*)malloc(sizeof(NODE));
    newnode->data=num;
    newnode->next=NULL;
    for(tptr=start;tptr;shadow=tptr,tptr=tptr->next);
    if(start==NULL){
        newnode->next=start;
        start=newnode;
    }
    else{
        newnode->next=shadow->next;
        shadow->next=newnode;
    }
}
void delet(int num){
   
        for(tptr=start;tptr&&tptr->data!=num;shadow=tptr,tptr=tptr->next);
            if(tptr==NULL)
               printf("The value is not found");
            else if(tptr==start)
            {
                start=start->next;
                free(tptr);
            }
            else
            {
                shadow->next=tptr->next;
                free(tptr);
            }
}
    void display(){
        for(tptr=start;tptr;tptr=tptr->next)
        printf("%d->",tptr->data);
    }
void main() {
   int n,del;
   scanf("%d",&n);
   int arr[n];
   for(int i=0;i<n;i++)
   scanf("%d",&arr[i]);
   for(int i=0;i<n;i++)
   insert(arr[i]);
    display();
    printf("\nEnter the delete value:");
    scanf("%d",&del);
    delet(del);
    display();
}
output
5
10 20 30 40 50
10->20->30->40->50->
Enter the delete value:30
10->20->40->50->
-------------------------------------------------------------------------------------------------------------------------------
3.Search element in linked list.
#include <stdio.h>
#include<malloc.h>
typedef struct node{
    int data;
    struct node *next;
}NODE;
NODE *newnode,*start=NULL,*tptr,*shadow;
void insert(int num){
    newnode =(NODE*)malloc(sizeof(NODE));
    newnode->data=num;
    newnode->next=NULL;
    for(tptr=start;tptr;shadow=tptr,tptr=tptr->next);
    if(start==NULL){
        newnode->next=start;
        start=newnode;
    }
    else{
        newnode->next=shadow->next;
        shadow->next=newnode;
    }
}
void search(int num){
   
        for(tptr=start;tptr&&tptr->data!=num;shadow=tptr,tptr=tptr->next);
            if(tptr==NULL)
               printf("The Search is not found");
            else
            printf("The Search is Found");
}
    void display(){
        for(tptr=start;tptr;tptr=tptr->next)
        printf("%d->",tptr->data);
    }
void main() {
   int n,sea;
   scanf("%d",&n);
   int arr[n];
   for(int i=0;i<n;i++)
   scanf("%d",&arr[i]);
   for(int i=0;i<n;i++)
   insert(arr[i]);
    display();
    printf("\nEnter the Search value:");
    scanf("%d",&sea);
    search(sea);
}
output
5
10 24 5 363 7
10->24->5->363->7->
Enter the Search value:6
The Search is not found
------------------------------------------------------------------------------------------------------------------------------
4.Stack in linked list
#include <stdio.h>
#include <malloc.h>

typedef struct node
    {
        int data;
        struct node*next;
    }STACK;

typedef struct node*StackPTR;
StackPTR newnode,top,tptr;
void push(int num)
{
    newnode = (StackPTR)malloc(sizeof(STACK));
    newnode->data = num;
    newnode->next = NULL;
if(top==NULL)
top=newnode;
else
newnode->next=top;
top=newnode;
}
int pop()
{

    if (top==NULL)
           return -1;
    else
        {
        tptr=top;
       int temp=top->data;
        top=top->next;
        free(tptr);
        return temp;
        }
}
void display()
{
    printf("\n");
    for(tptr=top;tptr;tptr=tptr->next)
    printf("%d ",tptr->data);
}
int main()
{
    int n;
    scanf("%d",&n);
    int arr[n];
    for(int i=0;i<n;i++)
    scanf("%d",&arr[i]);
    for(int i=0;i<n;i++)
    push(arr[i]);
    display();
    pop();
   display();
}
output
5
10 54 02 35 6

6 35 2 54 10 
35 2 54 10 
------------------------------------------------------------------------------------------------------------------------
5.sorting in linked list
#include<stdio.h>
#include<malloc.h>
typedef struct node
{
    int data;
    struct node *next;
}NODE;
NODE *newnode,*tptr,*shadow,*start=NULL;
void insert(int num)
{
newnode=(NODE*)malloc(sizeof(NODE));
newnode->data = num;
newnode->next = NULL;
for(tptr=start;tptr&&tptr->data<num;shadow=tptr,tptr=tptr->next);
if(tptr==start)
{
    newnode->next=start;
    start=newnode;
}
else
{
    newnode->next=shadow->next;
    shadow->next=newnode;
}
}
void display()
{
    for(tptr=start;tptr;tptr=tptr->next)
        printf("%d ",tptr->data);
}
int main()
{
insert(20);
insert(10);
insert(5);
display();
return 0;
}
---------------------------------------------------------------------------------------------------------------------------
6.queue linked list
#include<stdio.h>
#include<malloc.h>
typedef struct queue
{
    int data;
    struct queue* next;
}QUEUE;
typedef struct queue* QUPTR;
QUPTR front,rear,newnode,tptr,safe;
void enqueue(int num)
{
    newnode=(QUPTR)malloc(sizeof(QUEUE));
    newnode->data=num;
    newnode->next=NULL;
    if(front==NULL){
        front=newnode;
        rear=newnode;
    }
    else
    {
       rear->next = newnode;
        rear = newnode;
    }
}
int dequeue()
{
    int temp;
    if(front==NULL)
        return 0;
    else
    {
        temp=front->data;
        safe=front;
        front=front->next;
        free(safe);
        return temp;
    }
}
void display()
{
    tptr=front;
    while(tptr)
    {
        printf("%d ",tptr->data);
        tptr=tptr->next;
    }
}
int main()
{

    int arr[]={10,20,30,40,50,60,70,80,90,100};
    int num,noe,index;
    noe=sizeof(arr)/sizeof(int);
    printf("%d\n",noe);
    for(index=0;index<noe;index++)
        enqueue(arr[index]);
    display();
    num=dequeue();
    printf("\n");
    printf("%d dequed element",num);
    printf("\n");
    display();
    return 0;
}
output
10
10 20 30 40 50 60 70 80 90 100 
10 dequed element
20 30 40 50 60 70 80 90 100 
--------------------------------------------------------------------------------------------------------------------
7.Doublly linked list insert
#include<stdio.h>
#include<malloc.h>
typedef struct node
{
    int data;
    struct node *next;
    struct node *pre;
}doublelink;
doublelink *newnode,*start=NULL,*end,*tptr;
void insert(int num){
    newnode=(doublelink*)malloc(sizeof(doublelink));
    newnode->pre=NULL;
    newnode->data=num;
     newnode->next=NULL;
    if(start==NULL){
        start=end=newnode;
        }
    else{
         newnode->pre=end->next;
          end->next=newnode;
          end=newnode;
          }
}
void display()
{
     for(tptr=start;tptr;tptr=tptr->next)
        printf("%d ",tptr->data);
}

int main()
{
    int n;
    scanf("%d",&n);
    int arr[n];
    for(int i=0;i<n;i++)
    scanf("%d",&arr[i]);
     for(int i=0;i<n;i++)
     insert(arr[i]);
    display();
 
    return 0;
}
-------------------------------------------------------------------------------------------------------------------------
8.Doublly linked list delete,search
#include<stdio.h>
#include<malloc.h>
typedef struct node
{
    int data;
    struct node *next;
    struct node *pre;
}doublelink;
doublelink *newnode,*start=NULL,*end,*tptr;
void insert(int num){
    newnode=(doublelink*)malloc(sizeof(doublelink));
    newnode->pre=NULL;
    newnode->data=num;
     newnode->next=NULL;
    if(start==NULL){
        start=end=newnode;
        }
    else{
         newnode->pre=end->next;
          end->next=newnode;
          end=newnode;
          }
}
void deleteNode(int num)
{             
            for(tptr=start;tptr && tptr->data!=num;tptr=tptr->next);
            if(tptr==start)
            {
                start->next->pre=start->pre;
                start=start->next;
                free(tptr);
            }
            else if(tptr==end)
            {
                end->pre->next=end->next;
                end=end->pre;
                free(tptr);
            }
            else
            {
                tptr->pre->next=tptr->next;
                tptr->next->pre =tptr->pre;
                free(tptr);
            }
            
}
void display()
{
     for(tptr=start;tptr;tptr=tptr->next)
        printf("%d ",tptr->data);
}

int main()
{
    int n,del,flag=0;;
    scanf("%d",&n);
    int arr[n];
    for(int i=0;i<n;i++)
    scanf("%d",&arr[i]);
     for(int i=0;i<n;i++)
     insert(arr[i]);
      display();
     printf("\nEnter the delete value:");
     scanf("%d",&del);
     for(int i=0;i<n;i++)
     {
         if(arr[i]==del)
         {
             deleteNode(del);
             flag++;
         }
     }
     if(flag==0)
     printf("The Value is not found");
    display();
 
    return 0;
}
--------------------------------------------------------------------------------------------------------------------
9.Queue in Stack
#include<stdio.h>
#define size 5
int s1[size],s2[size];
int count=0,top=-1,c1=0;
void push1(int num){
 s1[++top]=num;
    count++;
}
int pop1(){
    printf("%d ",s2[top]);
     s2[top--];
     }
void enqueue(int num){
  push1(num);
}
void dequeue(){
for(int i=0;i<=count-1;i++)
{
    s2[i]=s1[top-i];
}
pop1();
for(int i=0;i<=top;i++)
{
    s1[i]=s2[top-i];
}
c1++;
}

void display(){
    for(int i=0;i<count-c1;i++)
    printf("%d ",s1[i]);
}
int main(){
    enqueue(5);
    enqueue(2);
    enqueue(1);
    enqueue(8);
    printf("Dequeue Values:");
    dequeue();
    dequeue();
    enqueue(7);
    printf("\nEnqueue values:");
    display();
}
output
Dequeue Values:5 2 
Enqueue values:1 8 7
----------------------------------------------------------------------------------------------------------------------------------
10.Binary Search Tree
#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>
#define max(a,b) (a)>(b)?(a):(b)
#define min(a,b) (a)<(b)?(a):(b)
typedef struct node{
    int data;
    struct node *left,*right;
}NODE;
 NODE *newnode,*root;
NODE* createnode(int num){
   newnode = (NODE*)malloc(sizeof(NODE));
    newnode->data = num;
    newnode->left = NULL;
    newnode->right = NULL;
}
NODE* insert(NODE* node,int num){
    
    if(node==NULL)
    return createnode(num);
    
    else if(num<node->data)
    node->left=insert(node->left,num);
    
    else if(num>node->data)
    node->right=insert(node->right,num);
    return node;
    
}
void displayPreorder(NODE* node)
{
    if(node!=NULL)
    {
    printf("%d ",node->data);
    displayPreorder(node->left);
    displayPreorder(node->right);
        
    }
}
void displayPostorder(NODE* node)
{
    if(node!=NULL)
    {
    displayPostorder(node->left);
    displayPostorder(node->right);
    printf("%d ",node->data);
        
    }
}
void displayInorder(NODE* node)
{
    if(node!=NULL)
    {
    displayInorder(node->left);
    printf("%d ",node->data);
    displayInorder(node->right);
        
    }
}
int Height(NODE* node)
{
    if(node==NULL)
    return -1;
    return max(Height(node->left),Height(node->right))+1;
}
int MinValue(NODE* node)
{
    if(node==NULL)
    return -1;
    else{
        while(node->left!=NULL)
        node=node->left;
    }return node->data;
}
int MaxValue(NODE* node)
{
    if(node==NULL)
    return -1;
    else{
        while(node->right!=NULL)
        node=node->right;
    }return node->data;
}
int main(){
    root=insert(root,9);
    insert(root,7);
    insert(root,14);
    insert(root,16);
    insert(root,11);
    insert(root,8);
    insert(root,6);
    printf("\nPreOrder:\n");
    displayPreorder(root);
    printf("\nInOrder:\n");
    displayInorder(root);
    printf("\nPostOrder:\n");
    displayPostorder(root);
    printf("\nHeight:%d",Height(root));
    printf("\nMinValue:%d",MinValue(root));
    printf("\nMaxValue:%d",MaxValue(root));
    return 0;
}
output
PreOrder:
9 7 6 8 14 11 16 
InOrder:
6 7 8 9 11 14 16 
PostOrder:
6 8 7 11 16 14 9 
Height:2
MinValue:6
MaxValue:16
-------------------------------------------------------------------------------------------------------------------------------
11.
